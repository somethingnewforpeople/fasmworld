use16								; генерированить 16-битный код(для DOS)
org 100h							; начало программы с адресса 100h
;-----------------------------------
	jmp start						; переход на метку start
;-----------------------------------
buffer db 11 dup(?)
num db ?
error db 10,"ERROR",13,10,"$"
success db 10,"Success",13,10,"$"
;-----------------------------------
start:								; начало программы
	mov al, 9 						; al = 9 - кол-во символов, включая CR
	call input_byte 				; вызов процедуры ввода байта
	movzx cx, [buffer+1] 			; cx = кол-во цифр в строке
	mov si, buffer+2				; si = адрес начала строковых цифр
	xor ax, ax 						; обнуление ax для получения числа
	mov bl, 2 						; bl = 2 для умножений
	call str_to_num 				; вызов процедуры конвертации строки в число


print_success: 						; метка вывода успешного ввода
	mov dx, success 				; dx = адресс success
	mov ah, 09h 					; ah = функция DOS для вывода на экран
	int 21h 						; вызов функции DOS


exit: 								; конец программы
	mov ax, 4C00h					; ah - завершение программы DOS, al - код завершения
	int 21h							; вызов функции DOS


errors: 							; метка для ошибок ввода
	mov dx, error 					; dx = адрес error
	mov ah, 09h 					; ah = функция DOS вывода строки на экран
	int 21h 						; вызов функции DOS
	jmp start 						; переход на метку start


input_byte: 						; процедура ввода байта
	mov [buffer], al 				; первый байт буффера - длина строки
	mov byte[buffer+1], 0 			; обнуление второго байта буффера
	mov dx, buffer 					; dx = ссылка на buffer
	mov ah, 0Ah 					; ah = функция DOS ввода строки
	int 21h 						; вызов функции DOS
	ret 							; выход из процедуры

;-------------Процедура для конвертации строки в число--------------------
str_to_num:
	jcxz errors 					; переход на метку errors если cx == 0
	push si 						; отправка si в стек
	push cx 						; отправка cx в стек
	push bx 						; отправка bx в стек
	push dx 						; отправка dx в стек
	push ax 						; отправка ax в стек

convert: 							; метка конвертации
	mul bl 							; al = результат умножения на степень
	mov dl, [si] 					; dl = строковый код цифры
	cmp dl, "0" 					; проверка ввода цифры
	jl errors 						; переход на метку errors если dl < "0"
	cmp dl, "1" 					; проверка ввода цифры
	jg errors 						; переход на метку errors если dl > "1"
	inc si 							; увеличиваем si на 1 для адреса новой строки
	sub dl, "0" 					; dl = 1 или 0
	add al, dl 						; al = al + dl
	loop convert 					; итерация мо метке convert
	mov [num], al 					; сохранение числа в num

str_to_num_exit: 					; метка конца процедуры
	pop ax 							; возврат ax из стека
	pop dx 							; возврат dx из стека
	pop bx 							; возврат bx из стека
	pop cx 							; возврат cx из стека
	pop si 							; возврат si из стека
	ret 	 						; выход из процедуры
;-------------------------------------------------------------------------
;-----------------------------------
; Напишите программу для ввода байта с консоли в двоичном виде. Желательно с проверкой корректности ввода
