use16						; генерированить 16-битный код(для DOS)
org 100h					; начало программы с адресса 100h
;-----------------------------------
	jmp start				; безусловный переход на метку start
;-----------------------------------
f_array dw 111,222,333
s_array dw 100,200,300,400
t_array dw 11,22,33,44,55

f_length db 3
s_length db 4
t_length db 5

res db 3 dup(?)
;-----------------------------------
start:						; метка start для начала программы
	xor si, si 				; обнуление si для смещений
	xor ax, ax 				; обнуления ax для сложений
	xor di, di 				; обнуление di для сохранения результата
	mov bx, f_array 			; bx - адресс первого массива
	movzx cx, [f_length] 			; cx - длина первого массива для счетчика
	call avg_func 				; вызов процедуры avg_func
	mov bx, s_array 			; bx - адресс второго массива
	movzx cx, [s_length] 			; cx - длина второго массива для счетчика
	call avg_func 				; вызов процедуры avg_func
	mov bx, t_array 			; bx - адресс третьего массива
	movzx cx, [t_length] 			; cx - длина третьего массива для счетчика
	call avg_func 				; вызов процедуры avg_func
	jmp exit 				; переход на метку exit


avg_func: 					; процедура для нахождения среднего арифметического
	push si 				; отправка si в стек
	push ax 				; отправка ax в стек
	push cx 				; отправка cx в стек
operations: 					; метка для итераций по массиву
	add ax, word[bx+si] 			; сложение слова в bx со смещением si и ax
	add si, 2 				; si + 2 для следующего смещения
	loop operations 			; итерация по метке operations
	pop cx 					; возвращение cx в стек
	div cl 					; ax / cl. ah-остаток, al-целая часть
	mov byte[res+di], al 			; сохранение al в res со смещением di
	inc di 					; увеличиваем di на 1 для будущего сохранения
avg_func_end: 					; конец процедуры
	pop ax 					; возвращение ax в стек
	pop si 					; возвращение si в стек
	ret 					; возвращение к коду


exit:
	mov ax, 4C00h					; ah - завершение программы DOS, al - код завершения
	int 21h							; вызов функции DOS
;-----------------------------------
; Объявите в программе 2-3 массива слов без знака. Количество элементов каждого массива должно быть разным и храниться в отдельной 16-битной переменной без знака. Напишите процедуру для вычисления среднего арифметического массива чисел. В качестве параметров ей будет передаваться адрес массива и количество элементов, а возвращать она будет вычисленное значение. С помощью процедуры вычислите среднее арифметическое каждого массива и сохраните где-нибудь в памяти.
