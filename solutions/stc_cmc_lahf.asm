use16								; генерированить 16-битный код(для DOS)
org 100h							; начало программы с адресса 100h
;-----------------------------------
	jmp start						; переход на метку start
;-----------------------------------
num_res db ?
str_res db ?,13,10,"$"
;-----------------------------------
start:								; начало программы
	xor ax, ax 						; изменяем флаг 'z' на 1 
	stc 							; изменяем флаг 'c' на 1
	call sum_flags 					; вызов процедуры
	cmp [num_res], 1 				; проверка num_res
	jle print_res 					; переход на метку print_res если num_res <= 1
rev_c: 								; метка инвертирования флага 'c'
	cmc 							; инвертирование флага 'c'
print_res: 							; метка вывода результата
	mov dx, str_res 				; dx = адресс str_res
	mov ah, 09h 					; ah = функция DOS вывода строки
	int 21h 						; вызов функции DOS


exit: 								; конец программы
	mov ax, 4C00h					; ah - завершение программы DOS, al - код завершения
	int 21h							; вызов функции DOS


sum_flags: 							; процедура суммирования флагов регистра
	push ax 						; отправка ax в стек
	pushf 							; отправка значения флагов в стек
s_f: 								; метка суммирования флагов
	lahf 							; загрузка младшего байта регистра флвгоа в ah
	xor al, al						; обнуление al
	shl ah, 1 						; флаг 'c' = значение флага 's'
	adc al, 0 						; сложение al и флага 'c'
	shl ah, 1 						; флаг 'c' = значение флага 'z'
	adc al, 0 						; сложение al и флага 'c'
	shl ah, 6 						; флаг 'c' = значение флага 'c'
	adc al, 0 						; сложение al и флага 'c'
	mov [num_res], al 				; сохранение суммы в num_res
	add al, "0" 					; превращаем сумму в строковый тип
	mov [str_res], al 				; сохранение суммы в виде строки в str_res
sum_flags_end: 						; метка конца процедуры
	popf							; возврат значений флагов
	pop ax 							; возврат ax из стека
	ret								; выход из процедуры
;-----------------------------------
; Вычислите сумму значений флагов CF, SF, ZF и выведите на консоль результат сложения. Если результат больше 1, инвертируйте значение флага CF
